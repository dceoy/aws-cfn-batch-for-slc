---
AWSTemplateFormatVersion: 2010-09-09
Description: IAM roles for Batch, Lambda, and Step Functions
Parameters:
  ProjectName:
    Description: Set the project name.
    Type: String
    Default: slhpc
  S3StackName:
    Description: Set the S3 Stack Name.
    Type: String
    Default: slhpc-dev-s3-buckets-for-io
Resources:
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchJobRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-BatchJobRole-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-InputBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-InputBucket
                        - /*
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ReferenceBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ReferenceBucket
                        - /*
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
              - Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-OutputBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-OutputBucket
                        - /*
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ArchiveBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ArchiveBucket
                        - /*
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
                  - s3-object-lambda:PutObject*
  BatchJobExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchJobExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  BatchEc2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchEc2InstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-BatchEBS-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - ec2:createTags
                - ec2:createVolume
                - ec2:attachVolume
                - ec2:deleteVolume
                - ec2:modifyInstanceAttribute
                - ec2:describeVolumes
              Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  BatchEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: BatchEc2InstanceRole
  BatchSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchSpotFleetRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-LambdaExecutionRole-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-InputBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-InputBucket
                        - /*
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ReferenceBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ReferenceBucket
                        - /*
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
              - Resource:
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-OutputBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-OutputBucket
                        - /*
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ArchiveBucket
                  - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Fn::ImportValue: !Sub ${AWS::Region}-${S3StackName}-ArchiveBucket
                        - /*
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*
                  - s3-object-lambda:PutObject*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-StepFunctionsExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-StepFunctionsExecutionRole-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: '*'
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                  - batch:TerminateJob
                Resource: '*'
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
Outputs:
  BatchServiceRole:
    Value: !GetAtt BatchServiceRole.Arn
    Description: BatchServiceRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchServiceRole
  BatchJobRole:
    Value: !GetAtt BatchJobRole.Arn
    Description: BatchJobRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchJobRole
  BatchJobExecutionRole:
    Value: !GetAtt BatchJobExecutionRole.Arn
    Description: BatchJobExecutionRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchJobExecutionRole
  BatchEc2InstanceRole:
    Value: !GetAtt BatchEc2InstanceRole.Arn
    Description: BatchEc2InstanceRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchEc2InstanceRole
  BatchEc2InstanceProfile:
    Value: !GetAtt BatchEc2InstanceProfile.Arn
    Description: BatchEc2InstanceProfile
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchEc2InstanceProfile
  BatchSpotFleetRole:
    Value: !GetAtt BatchSpotFleetRole.Arn
    Description: BatchSpotFleetRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchSpotFleetRole
  LambdaExecutionRole:
    Value: !GetAtt LambdaExecutionRole.Arn
    Description: LambdaExecutionRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-LambdaExecutionRole
  StepFunctionsExecutionRole:
    Value: !GetAtt StepFunctionsExecutionRole.Arn
    Description: StepFunctionsExecutionRole
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-StepFunctionsExecutionRole
