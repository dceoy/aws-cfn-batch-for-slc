---
AWSTemplateFormatVersion: 2010-09-09
Description: IAM roles for Batch, Lambda, and Step Functions
Parameters:
  ProjectName:
    Description: Set the project name.
    Type: String
    Default: hpc
Resources:
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-BatchServiceRole
        - Key: ProjectName
          Value: !Ref ProjectName
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-s3-access-policy
      Roles:
        - !Ref BatchJobRole
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:Describe*
              - s3:Get*
              - s3:List*
              - s3-object-lambda:Get*
              - s3-object-lambda:List*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-input-${AWS::AccountId}
              - !Sub arn:aws:s3:::${ProjectName}-input-${AWS::AccountId}/*
              - !Sub arn:aws:s3:::${ProjectName}-reference-${AWS::AccountId}
              - !Sub arn:aws:s3:::${ProjectName}-reference-${AWS::AccountId}/*
          - Effect: Allow
            Action:
              - s3:Describe*
              - s3:Get*
              - s3:List*
              - s3:PutObject*
              - s3-object-lambda:Get*
              - s3-object-lambda:List*
              - s3-object-lambda:PutObject*
            Resource:
              - !Sub arn:aws:s3:::${ProjectName}-output-${AWS::AccountId}
              - !Sub arn:aws:s3:::${ProjectName}-output-${AWS::AccountId}/*
              - !Sub arn:aws:s3:::${ProjectName}-archive-${AWS::AccountId}
              - !Sub arn:aws:s3:::${ProjectName}-archive-${AWS::AccountId}/*
  EfsAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-efs-access-policy
      Roles:
        - !Ref BatchJobRole
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - elasticfilesystem:Describe*
              - elasticfilesystem:List*
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientWrite
            Resource: '*'
            Condition:
              StringEquals:
                aws:ResourceTag/ProjectName: !Ref ProjectName
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchJobRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-BatchJobRole
        - Key: ProjectName
          Value: !Ref ProjectName
  BatchJobExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchJobExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-BatchJobExecutionRole
        - Key: ProjectName
          Value: !Ref ProjectName
  BatchEc2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchEc2InstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: !Sub ${ProjectName}-ebs-access-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:createTags
                  - ec2:createVolume
                  - ec2:attachVolume
                  - ec2:deleteVolume
                  - ec2:modifyInstanceAttribute
                  - ec2:describeVolumes
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-BatchEc2InstanceRole
        - Key: ProjectName
          Value: !Ref ProjectName
  BatchEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${ProjectName}-BatchEc2InstanceProfile
      Path: /
      Roles:
        - !Ref BatchEc2InstanceRole
  BatchSpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-BatchSpotFleetRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-BatchSpotFleetRole
        - Key: ProjectName
          Value: !Ref ProjectName
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-LambdaExecutionRole
        - Key: ProjectName
          Value: !Ref ProjectName
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-StepFunctionsExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ProjectName}-stepfunctions-execution-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
                Condition:
                  StringEquals:
                    aws:ResourceTag/ProjectName: !Ref ProjectName
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: '*'
                Condition:
                  StringEquals:
                    aws:ResourceTag/ProjectName: !Ref ProjectName
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                  - batch:TerminateJob
                Resource: '*'
                Condition:
                  StringEquals:
                    aws:ResourceTag/ProjectName: !Ref ProjectName
              - Effect: Allow
                Action:
                  - events:PutTargets
                  - events:PutRule
                  - events:DescribeRule
                Resource:
                  - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-StepFunctionsExecutionRole
        - Key: ProjectName
          Value: !Ref ProjectName
Outputs:
  BatchServiceRoleArn:
    Value: !GetAtt BatchServiceRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchServiceRoleArn
  BatchJobRoleArn:
    Value: !GetAtt BatchJobRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchJobRoleArn
  BatchJobExecutionRoleArn:
    Value: !GetAtt BatchJobExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchJobExecutionRoleArn
  BatchEc2InstanceRoleArn:
    Value: !GetAtt BatchEc2InstanceRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchEc2InstanceRoleArn
  BatchEc2InstanceProfileArn:
    Value: !GetAtt BatchEc2InstanceProfile.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchEc2InstanceProfileArn
  BatchSpotFleetRoleArn:
    Value: !GetAtt BatchSpotFleetRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-BatchSpotFleetRoleArn
  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-LambdaExecutionRoleArn
  StepFunctionsExecutionRoleArn:
    Value: !GetAtt StepFunctionsExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-StepFunctionsExecutionRoleArn
